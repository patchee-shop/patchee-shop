{"ast":null,"code":"var _jsxFileName = \"/Users/nikitaspiridonov/Documents/Patchee Shop/my-app/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/React.createContext();\n\nfunction ContextProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // WIDELY USED STATES\n  const [records, setRecords] = useState([]);\n  const [filteredRecords, setFilteredRecords] = useState({\n    antiaging: [],\n    discounts: [],\n    facemasks: [],\n    hands: [],\n    body: [],\n    face: [],\n    wrinkles: [],\n    darkcircles: [],\n    hair: [],\n    moisture: [],\n    eyemasks: [],\n    acne: [],\n    scrubs: [],\n    other: [],\n    all: []\n  });\n  const [currentCategory, setCurrentCategory] = useState(\"all\");\n  const [userPhone, setUserPhone] = useState(\"+7\");\n  const [userName, setUserName] = useState(\"\"); // CONSTANTS\n\n  const productsAvailableBaseUrl = \"https://api.airtable.com/v0/appduyTcvGxpEgTb8/tblMpliaVkCLsiKnC?view=%D0%92+%D0%BD%D0%B0%D0%BB%D0%B8%D1%87%D0%B8%D0%B8\";\n  const ordersListBaseUrl = \"https://api.airtable.com/v0/appduyTcvGxpEgTb8/%D0%9E%D1%84%D0%BE%D1%80%D0%BC%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B7%D0%B0%D0%BA%D0%B0%D0%B7%D0%BE%D0%B2\";\n  useEffect(() => {\n    localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n  }, [cartItems]); // CONNECTION WITH DATABASE\n\n  useEffect(() => {\n    fetch(productsAvailableBaseUrl, {\n      headers: {\n        'Authorization': 'Bearer keymV3iplyx82ryEd'\n      }\n    }).then(res => res.json()).then(data => setRecords(data.records));\n  }, []);\n\n  const insertNewOrder = (itemId, quantity, orderId, userPhone, userName) => fetch(ordersListBaseUrl, {\n    method: 'POST',\n    headers: {\n      'Authorization': 'Bearer keymV3iplyx82ryEd',\n      'Content-Type': 'application/json'\n    },\n    body: `{ \n                \"fields\": {\n                    \"Номер заказа\": \"${orderId}\",\n                    \"Скидка\": 0,\n                    \"Товар\": [\n                        \"${itemId}\"\n                    ],\n                    \"Количество\": ${quantity},\n                    \"Телефон\": \"${userPhone}\",\n                    \"Имя\": \"${userName}\"\n                }\n            }`\n  }); // WIDELY USED FUNCTIONS\n\n\n  const additionalFilterTyping = records => {\n    return records.filter(record => JSON.stringify(record).toLowerCase().includes(searcherValue.toLowerCase()));\n  };\n\n  const filterForCategory = tag => {\n    return additionalFilterTyping(records.filter(record => record.fields.Тэги.includes(tag)));\n  };\n\n  const filterTyping = () => {\n    return records.filter(record => JSON.stringify(record).toLowerCase().includes(searcherValue.toLowerCase()));\n  };\n\n  useEffect(() => {\n    setFilteredRecords({\n      antiaging: filterForCategory(\"антивозрастное\"),\n      discounts: filterForCategory(\"скидки\"),\n      facemasks: filterForCategory(\"тканевые маски\"),\n      hands: filterForCategory(\"руки\"),\n      body: filterForCategory(\"тело\"),\n      face: [...filterForCategory(\"лицо\"), ...filterForCategory(\"под глаза\"), ...filterForCategory(\"вокруг глаз\")],\n      wrinkles: filterForCategory(\"морщины\"),\n      darkcircles: filterForCategory(\"тёмные круги\"),\n      hair: filterForCategory(\"для волос\"),\n      moisture: filterForCategory(\"увлажнение\"),\n      eyemasks: filterForCategory(\"патчи\"),\n      acne: filterForCategory(\"акне\"),\n      scrubs: filterForCategory(\"скрабы\"),\n      other: filterForCategory(\"другое\"),\n      all: records\n    });\n  }, [records]); // SEARCHER ELEMENT\n\n  const [searcherValue, setSearcherValue] = useState(\"\");\n\n  const handleSearcher = event => {\n    setSearcherValue(prevValue => prevValue = event.target.value);\n  };\n\n  useEffect(() => {\n    setFilteredRecords({\n      antiaging: filterForCategory(\"антивозрастное\"),\n      discounts: filterForCategory(\"скидки\"),\n      facemasks: filterForCategory(\"тканевые маски\"),\n      hands: filterForCategory(\"руки\"),\n      body: filterForCategory(\"тело\"),\n      face: [...filterForCategory(\"лицо\"), ...filterForCategory(\"под глаза\"), ...filterForCategory(\"вокруг глаз\")],\n      wrinkles: filterForCategory(\"морщины\"),\n      darkcircles: filterForCategory(\"тёмные круги\"),\n      hair: filterForCategory(\"для волос\"),\n      moisture: filterForCategory(\"увлажнение\"),\n      eyemasks: filterForCategory(\"патчи\"),\n      acne: filterForCategory(\"акне\"),\n      scrubs: filterForCategory(\"скрабы\"),\n      other: filterForCategory(\"другое\"),\n      all: filterTyping()\n    });\n  }, [searcherValue]); // CART PAGE + CONTACTS WINDOW ELEMENT\n\n  const [cartItems, setCartItems] = useState(JSON.parse(localStorage.getItem(\"cartItems\")) || {});\n  const [isContactsWindowShown, setIsContactsWindowShown] = useState(\"hidden\");\n  const [leftEmptyPhone, setLeftEmptyPhone] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      records: filteredRecords.all,\n      filteredRecords,\n      searcherValue,\n      setSearcherValue,\n      handleSearcher,\n      currentCategory,\n      setCurrentCategory,\n      cartItems,\n      setCartItems,\n      isContactsWindowShown,\n      setIsContactsWindowShown,\n      leftEmptyPhone,\n      setLeftEmptyPhone,\n      insertNewOrder,\n      userPhone,\n      setUserPhone,\n      userName,\n      setUserName\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ContextProvider, \"b32jClVpLuXPDWWNxXSsq7poZRQ=\");\n\n_c = ContextProvider;\nexport { ContextProvider, Context };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/nikitaspiridonov/Documents/Patchee Shop/my-app/src/Context.js"],"names":["React","useState","useEffect","Context","createContext","ContextProvider","children","records","setRecords","filteredRecords","setFilteredRecords","antiaging","discounts","facemasks","hands","body","face","wrinkles","darkcircles","hair","moisture","eyemasks","acne","scrubs","other","all","currentCategory","setCurrentCategory","userPhone","setUserPhone","userName","setUserName","productsAvailableBaseUrl","ordersListBaseUrl","localStorage","setItem","JSON","stringify","cartItems","fetch","headers","then","res","json","data","insertNewOrder","itemId","quantity","orderId","method","additionalFilterTyping","filter","record","toLowerCase","includes","searcherValue","filterForCategory","tag","fields","Тэги","filterTyping","setSearcherValue","handleSearcher","event","prevValue","target","value","setCartItems","parse","getItem","isContactsWindowShown","setIsContactsWindowShown","leftEmptyPhone","setLeftEmptyPhone"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\n\nconst Context = React.createContext()\n\nfunction ContextProvider({children}) {\n\n    // WIDELY USED STATES\n    const [records, setRecords] = useState([])\n    const [filteredRecords, setFilteredRecords] = useState({\n        antiaging: [],\n        discounts: [],\n        facemasks: [],\n        hands: [],\n        body: [],\n        face: [],\n        wrinkles: [],\n        darkcircles: [],\n        hair: [],\n        moisture: [],\n        eyemasks: [],\n        acne: [],\n        scrubs: [],\n        other: [],\n        all: []\n    })\n    const [currentCategory, setCurrentCategory] = useState(\"all\")\n    const [userPhone, setUserPhone] = useState(\"+7\")\n    const [userName, setUserName] = useState(\"\")\n\n    // CONSTANTS\n    const productsAvailableBaseUrl = \"https://api.airtable.com/v0/appduyTcvGxpEgTb8/tblMpliaVkCLsiKnC?view=%D0%92+%D0%BD%D0%B0%D0%BB%D0%B8%D1%87%D0%B8%D0%B8\"\n    const ordersListBaseUrl = \"https://api.airtable.com/v0/appduyTcvGxpEgTb8/%D0%9E%D1%84%D0%BE%D1%80%D0%BC%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B7%D0%B0%D0%BA%D0%B0%D0%B7%D0%BE%D0%B2\"\n\n    useEffect(() => {\n        localStorage.setItem(\"cartItems\", JSON.stringify(cartItems))\n    }, [cartItems])\n\n\n    // CONNECTION WITH DATABASE\n    useEffect(() => {\n        fetch(productsAvailableBaseUrl, {\n            headers: {\n                'Authorization': 'Bearer keymV3iplyx82ryEd'\n            }\n        })\n            .then(res => res.json())\n            .then(data => (setRecords(data.records)))\n    }, [])\n    const insertNewOrder = (itemId, quantity, orderId, userPhone, userName) =>\n        fetch(ordersListBaseUrl, {\n            method: 'POST',\n            headers: {\n                'Authorization': 'Bearer keymV3iplyx82ryEd',\n                'Content-Type': 'application/json'\n            },\n            body:\n            `{ \n                \"fields\": {\n                    \"Номер заказа\": \"${orderId}\",\n                    \"Скидка\": 0,\n                    \"Товар\": [\n                        \"${itemId}\"\n                    ],\n                    \"Количество\": ${quantity},\n                    \"Телефон\": \"${userPhone}\",\n                    \"Имя\": \"${userName}\"\n                }\n            }`\n        })\n\n    // WIDELY USED FUNCTIONS\n    const additionalFilterTyping = (records) => {\n        return (records.filter(record => (\n            JSON.stringify(record).toLowerCase().includes(searcherValue.toLowerCase())\n      )))\n    }\n    const filterForCategory = (tag) => {\n        return additionalFilterTyping(records.filter(record => record.fields.Тэги.includes(tag)))\n    }\n    const filterTyping = () => {\n        return (records.filter(record => (\n            JSON.stringify(record).toLowerCase().includes(searcherValue.toLowerCase())\n        )))\n    }\n    useEffect(() => {\n        setFilteredRecords({\n            antiaging: filterForCategory(\"антивозрастное\"),\n            discounts: filterForCategory(\"скидки\"),\n            facemasks: filterForCategory(\"тканевые маски\"),\n            hands: filterForCategory(\"руки\"),\n            body: filterForCategory(\"тело\"),\n            face: [...filterForCategory(\"лицо\"), ...filterForCategory(\"под глаза\"), ...filterForCategory(\"вокруг глаз\")],\n            wrinkles: filterForCategory(\"морщины\"),\n            darkcircles: filterForCategory(\"тёмные круги\"),\n            hair: filterForCategory(\"для волос\"),\n            moisture: filterForCategory(\"увлажнение\"),\n            eyemasks: filterForCategory(\"патчи\"),\n            acne: filterForCategory(\"акне\"),\n            scrubs: filterForCategory(\"скрабы\"),\n            other: filterForCategory(\"другое\"),\n            all: records\n        })\n    }, [records])\n\n    // SEARCHER ELEMENT\n    const [searcherValue, setSearcherValue] = useState(\"\")\n    const handleSearcher = (event) => {\n        setSearcherValue(prevValue => (\n            prevValue = event.target.value\n        ))\n    }\n    useEffect(() => {\n        setFilteredRecords({\n            antiaging: filterForCategory(\"антивозрастное\"),\n            discounts: filterForCategory(\"скидки\"),\n            facemasks: filterForCategory(\"тканевые маски\"),\n            hands: filterForCategory(\"руки\"),\n            body: filterForCategory(\"тело\"),\n            face: [...filterForCategory(\"лицо\"), ...filterForCategory(\"под глаза\"), ...filterForCategory(\"вокруг глаз\")],\n            wrinkles: filterForCategory(\"морщины\"),\n            darkcircles: filterForCategory(\"тёмные круги\"),\n            hair: filterForCategory(\"для волос\"),\n            moisture: filterForCategory(\"увлажнение\"),\n            eyemasks: filterForCategory(\"патчи\"),\n            acne: filterForCategory(\"акне\"),\n            scrubs: filterForCategory(\"скрабы\"),\n            other: filterForCategory(\"другое\"),\n            all: filterTyping()\n        })\n    }, [searcherValue])\n\n    // CART PAGE + CONTACTS WINDOW ELEMENT\n    const [cartItems, setCartItems] = useState(JSON.parse(localStorage.getItem(\"cartItems\")) || {})\n    const [isContactsWindowShown, setIsContactsWindowShown] = useState(\"hidden\")\n    const [leftEmptyPhone, setLeftEmptyPhone] = useState(\"\")\n\n\n    return (\n        <Context.Provider value={{\n            records: filteredRecords.all,\n            filteredRecords,\n            searcherValue,\n            setSearcherValue,\n            handleSearcher,\n            currentCategory,\n            setCurrentCategory,\n            cartItems,\n            setCartItems,\n            isContactsWindowShown,\n            setIsContactsWindowShown,\n            leftEmptyPhone,\n            setLeftEmptyPhone,\n            insertNewOrder,\n            userPhone,\n            setUserPhone,\n            userName,\n            setUserName\n        }}>\n            {children}\n        </Context.Provider>\n    )\n}\n\nexport {ContextProvider, Context}"]},"metadata":{},"sourceType":"module"}